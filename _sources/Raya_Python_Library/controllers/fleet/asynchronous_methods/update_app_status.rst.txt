==============================
update_app_status()
==============================

.. raw:: html

    <hr/>

Sents to the fleet manager a status and a message of the task that is
being executed.

Reference
============

Arguments
------------

========= ======================= ============= ================================================
Arguments Type                    Default value Description
========= ======================= ============= ================================================
task_id   ``str``                 ``None``      Task id generated by the fleet manager
status    ``FLEET_UPDATE_STATUS`` ``None``      Status of the task
message   ``str``                               Message to show on the window
========= ======================= ============= ================================================

See the :ref:`complete list of fleet enumerations <fleet_enumerations>`

Return
--------------

``None``

Exceptions
--------------

-  ``RayaFleetMissingValue``

See the :ref:`complete list of fleet exceptions <fleet_exceptions>`

Usage Example
===============

.. code-block:: python

   from raya.application_base import RayaApplicationBase
   from raya.controllers.fleet_controller import FleetController
   from raya.enumerations import *


   class RayaApplication(RayaApplicationBase):

       async def setup(self):
           self.fleet: FleetController = await self.enable_controller('fleet')
           self.log.info(f'Hello from setup()')


       async def loop(self):
           await self.fleet.update_app_status(
                   status=FLEET_UPDATE_STATUS.INFO,
                   message='checking fleet info'
               )
           await self.sleep(3.0)
           await self.fleet.update_app_status(
                   status=FLEET_UPDATE_STATUS.WARNING,
                   message='checking fleet Warning'
               )
           await self.sleep(3.0)
           await self.fleet.update_app_status(
                   status=FLEET_UPDATE_STATUS.ERROR,
                   message='checking fleet ERROR'
               )
           await self.sleep(3.0)
           await self.fleet.update_app_status(
                   status=FLEET_UPDATE_STATUS.SUCCESS,
                   message='checking fleet succsess'
               )
           await self.sleep(3.0)
           await self.fleet.finish_task(
                   result=FLEET_FINISH_STATUS.SUCCESS,
                   message='checking fleet finish succsess'
               )
           await self.sleep(3.0)
           await self.fleet.finish_task(
                   result=FLEET_FINISH_STATUS.FAILED,
                   message='checking fleet finish FAILED'
               )
           await self.sleep(3.0)
           self.finish_app()


       async def finish(self):
           self.log.warn(f'Hello from finish()')

Once the task is executed you should see this on the task details

.. figure:: /_static/update_app_status.png
   :alt: update_status.png
   :align: center
   :height: 803px
   :width: 414px

   
